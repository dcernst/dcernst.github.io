{"version":3,"file":"640.js","mappings":"sJAaAA,OAAOC,SAAW,IAGlBC,EAAEC,UAAUC,GAAG,2BAA4BJ,OAAOK,SAASC,W","sources":["webpack://WebComponents/./runestone/wavedrom/js/wavedrom.js"],"sourcesContent":["// ***********************************************\n// |docname| - JavaScript for the WaveDrom library\n// ***********************************************\n\"use strict\";\n\n// This took a fair amount of experimenting to figure out how to make this work with NPM and Webpack. Sigh. Here's the working result.\n//\n// This has already been packaged for the web with browserify, so we can just import it for the side effects (it defines ``window.WaveDrom``. Importing from the ``lib/`` folder produces a lot of unsatisfied imports when using webpack.\nimport \"wavedrom/wavedrom.min.js\";\n\n// WaveSkin isn't defined globally, so import the default export to get access to it. It defines a single variable, assuming that the variable will be assigned to the ``window``. Here, it's not. So...\nimport WaveSkin from \"wavedrom/skins/default.js\";\n// ...make the required WaveSkin (needed by WaveDrom) available globally.\nwindow.WaveSkin = WaveSkin;\n\n// Run the render after the dynamic load is done.\n$(document).on(\"runestone:login-complete\", window.WaveDrom.ProcessAll);\n"],"names":["window","WaveSkin","$","document","on","WaveDrom","ProcessAll"],"sourceRoot":""}